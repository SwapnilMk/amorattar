generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  slug      String    @unique
  productCategories ProductCategory[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  categoryId String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, categoryId])
}

type Discount {
  amount     Float
  percentage Float
}

type Color {
  id    String
  value String
  color String
  label String
}

type VolumeOption {
  ml    Int
  price Float
}

type Specification {
  key   String
  value String
}

model Product {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  slug              String            @unique
  srcUrl            String
  gallery           String[]
  brand             String
  price             Float
  discountedPrice   Float
  discount          Float
  rating            Float             @default(0)
  description       String
  gender            String[]
  productCategories ProductCategory[]
  colors            Color[]
  selectedColor     Color
  volumeOptions     VolumeOption[]
  quantity          Int
  isSale            Boolean           @default(false)
  specifications    Specification[]
  fragrance         String[]
  availabilityStatus String           @default("In Stock")
  orderItems        OrderItem[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  rating    Float
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  items     OrderItem[]
  total     Float
  status    String      @default("pending")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
} 