generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

type Discount {
  amount     Float
  percentage Float
}

type Color {
  name     String
  code     String
  imageUrl String
}

type VolumeOption {
  ml    Int
  price Float
  stock Int
}

type Specification {
  key   String
  value String
}

model Product {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  srcUrl         String
  gallery        String[]
  price          Float
  discountedPrice Float
  discount       Discount
  rating         Float
  description    String
  gender         String[]
  colors         Color[]
  selectedColor  Color
  volumeOptions  VolumeOption[]
  quantity       Int
  isSale         Boolean
  specifications Specification[]
  isInStock      Boolean
  isOutOfStock   Boolean
  categoryId     String?         @db.ObjectId
  category       Category?       @relation(fields: [categoryId], references: [id])
  orderItems     OrderItem[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  items     OrderItem[]
  total     Float
  status    String      @default("pending")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
} 